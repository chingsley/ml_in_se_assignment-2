import logging

# Global list to store account data
accounts = []

class Bank:
    def __init__(self, use_logger=False):
        self.use_logger = use_logger
        if self.use_logger:
            logging.basicConfig(level=logging.INFO)
            self.logger = logging.getLogger("BankLogger")
        else:
            self.logger = None

    def _log(self, message):
        if self.use_logger and self.logger:
            self.logger.info(message)
        else:
            print(message)

    def _find_account(self, name):
        for acc in accounts:
            if acc["name"] == name:
                return acc
        return None

    def create_account(self, name, monies=0):
        if not self._find_account(name):
            accounts.append({"name": name, "monies": monies})
            self._log(f"Account created for {name}")
        else:
            self._log("An account already exists")

    def credit(self, name, amount):
        account = self._find_account(name)
        if account:
            account["monies"] += amount
            self._log(f"{amount} credited to {name}")
        else:
            self._log("Account not found!")

    def debit(self, name, amount):
        account = self._find_account(name)
        if account:
            if account["monies"] >= amount:
                account["monies"] -= amount
                self._log(f"{amount} debited from {name}")
            else:
                self._log("Insufficient funds!")
        else:
            self._log("Account not found!")

    def get_funds(self, name):
        account = self._find_account(name)
        if account:
            return account["monies"]
        return "Account not found!"

# Example usage:
if __name__ == "__main__":    
    bank = Bank(use_logger=True)  # Set to False for print logging
    
    bank.create_account("John Doe")
    bank.credit("John Doe", 100)
    bank.debit("John Doe", 50)
    funds = bank.get_funds("John Doe")
    print("John Doe's funds:", funds)
