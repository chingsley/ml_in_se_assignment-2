import request from 'supertest';
import app from '../../src/index'; // Adjust the import to your actual Express app
import prisma from '../../src/core/database/client'; // Adjust to your Prisma client path
import jwt from 'jsonwebtoken';

jest.mock('../../src/core/database/client'); // Mock Prisma client

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

describe('GET /pending', () => {
  let token: string;

  beforeAll(() => {
    token = jwt.sign({ userId: 'test-user' }, JWT_SECRET, { expiresIn: '1h' });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should return 400 if questionIds are not provided', async () => {
    const response = await request(app)
      .get('/pending')
      .set('Authorization', `Bearer ${token}`);

    expect(response.status).toBe(400);
    expect(response.body).toEqual({ error: 'No questionIds provided' });
  });

  it('should return 401 if no token is provided', async () => {
    const response = await request(app).get('/pending');

    expect(response.status).toBe(401);
    expect(response.body).toEqual({ error: 'Access denied, no token provided' });
  });

  it('should return 401 if an invalid token is provided', async () => {
    const response = await request(app)
      .get('/pending')
      .set('Authorization', 'Bearer invalid-token');

    expect(response.status).toBe(401);
    expect(response.body).toEqual({ error: 'Invalid token' });
  });

  it('should return 500 if Prisma query fails', async () => {
    (prisma.question.findMany as jest.Mock).mockRejectedValue(new Error('Database error'));

    const response = await request(app)
      .get('/pending?questionIds=1,2,3')
      .set('Authorization', `Bearer ${token}`);

    expect(response.status).toBe(500);
    expect(response.body).toEqual({ error: 'Failed to get question. Internal server error.' });
  });

  it('should return questions when valid questionIds are provided', async () => {
    (prisma.question.findMany as jest.Mock).mockResolvedValue([
      { id: '1', text: 'Question 1', user: { username: 'User1' } },
      { id: '2', text: 'Question 2', user: { username: 'User2' } },
    ]);

    const response = await request(app)
      .get('/pending?questionIds=1,2')
      .set('Authorization', `Bearer ${token}`);

    expect(response.status).toBe(200);
    expect(response.body).toEqual([
      { id: '1', text: 'Question 1', user: { username: 'User1' } },
      { id: '2', text: 'Question 2', user: { username: 'User2' } },
    ]);
  });
});
