To ensure that the `/pending` endpoint is fail-proof, we need to write unit tests that cover various scenarios, including:

1. **Successful retrieval of pending questions**: When valid `questionIds` are provided.
2. **Missing `questionIds`**: When no `questionIds` are provided.
3. **Invalid `questionIds`**: When the provided `questionIds` are invalid or do not exist in the database.
4. **Authentication failure**: When the JWT token is missing or invalid.
5. **Database errors**: When there is an issue with the database connection or query execution.

Here’s how you can write unit tests for these scenarios using `jest` and `supertest`:

### Test Setup

First, ensure you have the necessary dependencies installed:

```bash
npm install --save-dev jest supertest ts-jest @types/jest @types/supertest
```

### Test File: `pending.test.ts`

```typescript
import request from 'supertest';
import express from 'express';
import { prisma } from '../../src/core/database/prisma'; // Adjust the import path as needed
import { authenticateToken } from '../../src/middleware/auth'; // Adjust the import path as needed
import { getPendingQuestions } from '../../src/controllers/question'; // Adjust the import path as needed

const app = express();
app.use(express.json());
app.get('/pending', authenticateToken, getPendingQuestions);

describe('GET /pending', () => {
  beforeAll(async () => {
    // Seed the database with test data
    await prisma.question.createMany({
      data: [
        { id: '1', content: 'Question 1', userId: 'user1' },
        { id: '2', content: 'Question 2', userId: 'user2' },
      ],
    });
  });

  afterAll(async () => {
    // Clean up the database
    await prisma.question.deleteMany();
    await prisma.$disconnect();
  });

  it('should return 200 and the pending questions when valid questionIds are provided', async () => {
    const token = jwt.sign({ userId: 'user1' }, process.env.JWT_SECRET || 'your_jwt_secret');
    const response = await request(app)
      .get('/pending')
      .set('Authorization', `Bearer ${token}`)
      .query({ questionIds: '1,2' });

    expect(response.status).toBe(200);
    expect(response.body).toHaveLength(2);
    expect(response.body[0].id).toBe('1');
    expect(response.body[1].id).toBe('2');
  });

  it('should return 400 when no questionIds are provided', async () => {
    const token = jwt.sign({ userId: 'user1' }, process.env.JWT_SECRET || 'your_jwt_secret');
    const response = await request(app)
      .get('/pending')
      .set('Authorization', `Bearer ${token}`);

    expect(response.status).toBe(400);
    expect(response.body.error).toBe('No questionIds provided');
  });

  it('should return 200 with an empty array when invalid questionIds are provided', async () => {
    const token = jwt.sign({ userId: 'user1' }, process.env.JWT_SECRET || 'your_jwt_secret');
    const response = await request(app)
      .get('/pending')
      .set('Authorization', `Bearer ${token}`)
      .query({ questionIds: '999,1000' });

    expect(response.status).toBe(200);
    expect(response.body).toHaveLength(0);
  });

  it('should return 401 when no token is provided', async () => {
    const response = await request(app)
      .get('/pending')
      .query({ questionIds: '1,2' });

    expect(response.status).toBe(401);
    expect(response.body.error).toBe('Access denied, no token provided');
  });

  it('should return 401 when an invalid token is provided', async () => {
    const response = await request(app)
      .get('/pending')
      .set('Authorization', 'Bearer invalidtoken')
      .query({ questionIds: '1,2' });

    expect(response.status).toBe(401);
    expect(response.body.error).toBe('Invalid token');
  });

  it('should return 500 when there is a database error', async () => {
    jest.spyOn(prisma.question, 'findMany').mockRejectedValueOnce(new Error('Database error'));

    const token = jwt.sign({ userId: 'user1' }, process.env.JWT_SECRET || 'your_jwt_secret');
    const response = await request(app)
      .get('/pending')
      .set('Authorization', `Bearer ${token}`)
      .query({ questionIds: '1,2' });

    expect(response.status).toBe(500);
    expect(response.body.error).toBe('Failed to get question. Internal server error.');
  });
});
```

### Explanation:

1. **Successful Retrieval**: The test checks if the endpoint returns the correct questions when valid `questionIds` are provided.
2. **Missing `questionIds`**: The test ensures that the endpoint returns a 400 error when no `questionIds` are provided.
3. **Invalid `questionIds`**: The test checks if the endpoint returns an empty array when invalid `questionIds` are provided.
4. **Authentication Failure**: The test ensures that the endpoint returns a 401 error when no token or an invalid token is provided.
5. **Database Error**: The test simulates a database error and checks if the endpoint returns a 500 error.

### Running the Tests

To run the tests, use the following command:

```bash
npm test
```

This will execute all the test cases and ensure that your `/pending` endpoint is fail-proof under various scenarios.
╭     13.14.0   …/project/energysmells                             kingsley-sample-collection   
╰ 